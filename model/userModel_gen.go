// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"fmt"
	"time"

	"github.com/SpectatorNan/gorm-zero/gormc"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"gorm.io/gorm"
)

var (
	cacheTodoListUserIdPrefix = "cache:todoList:user:id:"
)

type (
	userModel interface {
		Insert(ctx context.Context, tx *gorm.DB, data *User) error

		FindOne(ctx context.Context, id int64) (*User, error)
		FindOneByEmail(ctx context.Context, email string) (*User, error)
		Update(ctx context.Context, tx *gorm.DB, data *User) error

		Delete(ctx context.Context, tx *gorm.DB, id int64) error
		Transaction(ctx context.Context, fn func(db *gorm.DB) error) error
	}

	defaultUserModel struct {
		gormc.CachedConn
		table string
	}

	User struct {
		Id       int64     `gorm:"column:id;primaryKey;autoIncrement:true" json:"id"`
		Email    string    `gorm:"column:email;not null" json:"email"`
		Name     string    `gorm:"column:name;not null;comment:用户名称" json:"name"`
		Password string    `gorm:"column:password;not null;comment:用户密码" json:"password"`
		CreateAt time.Time `gorm:"column:create_at;not null;default:CURRENT_TIMESTAMP" json:"create_at"`
		UpdateAt time.Time `gorm:"column:update_at;not null;default:CURRENT_TIMESTAMP" json:"update_at"`
	}
)

func (User) TableName() string {
	return "`user`"
}

func newUserModel(conn *gorm.DB, c cache.CacheConf) *defaultUserModel {
	return &defaultUserModel{
		CachedConn: gormc.NewConn(conn, c),
		table:      "`user`",
	}
}

func (m *defaultUserModel) Insert(ctx context.Context, tx *gorm.DB, data *User) error {

	err := m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Create(&data).Error
	}, m.getCacheKeys(data)...)
	return err
}

func (m *defaultUserModel) FindOne(ctx context.Context, id int64) (*User, error) {
	todoListUserIdKey := fmt.Sprintf("%s%v", cacheTodoListUserIdPrefix, id)
	var resp User
	err := m.QueryCtx(ctx, &resp, todoListUserIdKey, func(conn *gorm.DB, v interface{}) error {
		return conn.Model(&User{}).Where("`id` = ?", id).First(&resp).Error
	})
	switch err {
	case nil:
		return &resp, nil
	case gormc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) FindOneByEmail(ctx context.Context, email string) (*User, error) {
	var resp User
	err := m.QueryNoCacheCtx(ctx, &resp, func(conn *gorm.DB, v interface{}) error {
		return conn.Model(&User{}).Where("email = ?", email).First(&resp).Error
	})
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

func (m *defaultUserModel) Update(ctx context.Context, tx *gorm.DB, data *User) error {
	old, err := m.FindOne(ctx, data.Id)
	if err != nil && err != ErrNotFound {
		return err
	}
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Save(data).Error
	}, m.getCacheKeys(old)...)
	return err
}

func (m *defaultUserModel) getCacheKeys(data *User) []string {
	if data == nil {
		return []string{}
	}
	todoListUserIdKey := fmt.Sprintf("%s%v", cacheTodoListUserIdPrefix, data.Id)
	cacheKeys := []string{
		todoListUserIdKey,
	}
	cacheKeys = append(cacheKeys, m.customCacheKeys(data)...)
	return cacheKeys
}

func (m *defaultUserModel) Delete(ctx context.Context, tx *gorm.DB, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		if err == ErrNotFound {
			return nil
		}
		return err
	}
	err = m.ExecCtx(ctx, func(conn *gorm.DB) error {
		db := conn
		if tx != nil {
			db = tx
		}
		return db.Delete(&User{}, id).Error
	}, m.getCacheKeys(data)...)
	return err
}

func (m *defaultUserModel) Transaction(ctx context.Context, fn func(db *gorm.DB) error) error {
	return m.TransactCtx(ctx, fn)
}

func (m *defaultUserModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheTodoListUserIdPrefix, primary)
}

func (m *defaultUserModel) queryPrimary(conn *gorm.DB, v, primary interface{}) error {
	return conn.Model(&User{}).Where("`id` = ?", primary).Take(v).Error
}
